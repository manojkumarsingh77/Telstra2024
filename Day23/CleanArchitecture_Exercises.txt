Exercise 1: Customer Support System – Design with Clean Architecture Principles
Scenario:

TelStar, a telecom service provider, is planning to modernize its Customer Support System to provide real-time support for millions of subscribers across different regions. The existing system is monolithic, resulting in long response times during peak hours, as customer complaints and service requests are handled inefficiently.

Your task is to propose and design a new architecture for the system that will handle the following requirements:

Separation of Customer Domains:
Customer profiles, complaints, and service requests should be managed as separate domains.

Event-Driven System:
Customer complaints or service requests should trigger events that notify relevant departments (e.g., Network Operations, Billing, Customer Care).

Read-Write Separation (CQRS):
Implement CQRS to separate querying customer details from updating or adding service requests.

Historical Tracking (Event Sourcing):
The system should maintain a complete history of customer interactions (e.g., past complaints and resolutions).

Microservices & Bounded Contexts:
Design the system using microservices, ensuring that each domain has clear boundaries and its own responsibilities.
Tasks:

Step 1: Domain-Centric Design
Identify the key domains (Customer Profile, Complaints, Service Requests) and describe the responsibilities of each.
Step 2: CQRS Pattern
Describe how you will implement the CQRS pattern to handle read and write operations separately for Customer Profile and Complaints.
Step 3: Event Sourcing
Propose an event-sourcing strategy to track changes in customer complaints over time, including a suitable event store database.
Step 4: Bounded Contexts
Propose a microservices architecture, ensuring that each domain has a clear bounded context.
Step 5: Event-Driven Design
Design an event-driven flow where a new complaint triggers an event, notifying the appropriate services (Customer Care, Network, Billing).


Exercise 2: Real-Time Network Monitoring – Scalable and Domain-Oriented Architecture
Scenario:

TelStar wants to build a Real-Time Network Monitoring System to monitor network performance, identify outages, and optimize service for customers. The system needs to handle a large volume of data from thousands of network nodes, including metrics such as signal strength, data speed, and call drop rates.

The new system should:

Domain Separation:
Manage network nodes, performance metrics, and alerts in separate domains.
Real-Time Data Processing (Event-Driven):
Capture real-time metrics from network nodes and trigger alerts if certain thresholds (e.g., signal strength drops below 50%) are met.
Historical Data (Event Sourcing):
Store historical network data and allow querying for trends and anomaly detection.
CQRS for Querying Metrics:
Implement CQRS to manage real-time metric updates (writes) and separate it from querying historical data (reads).
Scalable Microservice Design:
Design the system to scale across multiple regions, ensuring each region operates independently but can aggregate data at the central level.
Tasks:

Step 1: Domain-Centric Architecture
Identify the main domains (e.g., Network Nodes, Performance Metrics, Alerts) and define the responsibilities and boundaries for each.
Step 2: Event Sourcing
Design an event-sourcing mechanism that stores all network events (signal strength, call drops, etc.) and provides an immutable log of all past data.
Step 3: CQRS Implementation
Define how the system will handle frequent writes (incoming real-time metrics) and separate it from querying for historical reports.
Step 4: Event-Driven Design
Create an event-driven flow where performance thresholds trigger real-time alerts, and alerts are delivered to a dashboard or notification system.
Step 5: Microservices & Scalability
Propose a microservice-based architecture that supports regional monitoring services, which can aggregate into a central service for global network performance reporting.


Expected Deliverables:
Architecture Diagram: Participants should provide a high-level architecture diagram for each scenario, showing how they have implemented the concepts of domain separation, CQRS, Event Sourcing, and microservices.
Event Flow: A flow diagram showing how events are propagated through the system (e.g., a customer complaint, network metric, or performance alert).
Service Definitions: A brief description of each microservice, its role, and how it interacts with other services.
CQRS and Event Sourcing: Detailed explanations of how CQRS and event sourcing are implemented, including potential technologies (e.g., Kafka for events, EventStore for sourcing).
