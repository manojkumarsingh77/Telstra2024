
### Step 1: Create a Simple Flask Application

1. **Create a project directory**:

   ```bash
   mkdir flask_app
   cd flask_app
   ```

2. **Create a Python virtual environment** (optional but recommended):

   ```bash
   python3 -m venv venv
   source venv/bin/activate
   ```

3. **Install Flask**:

   ```bash
   pip install Flask
   ```

4. **Create the Flask application**:

   Create a file named `app.py` with the following content:

   ```python
   from flask import Flask

   app = Flask(__name__)

   @app.route('/')
   def hello_world():
       return 'Hello, World! This is a Flask app running on Azure VM and EC2.'

   if __name__ == '__main__':
       app.run(host='0.0.0.0', port=5000)
   ```

5. **Test the application locally**:

   ```bash
   python app.py
   ```

   You should see output indicating that the Flask server is running. You can open a web browser and navigate to `http://127.0.0.1:5000` to see the message "Hello, World!".

### Step 2: Prepare the Environment on Azure VM

1. **Create an Azure VM**:

   You can create an Azure VM using the Azure Portal or Azure CLI. Choose an appropriate image, such as Ubuntu Server.

   Example using Azure CLI:

   ```bash
   az vm create \
     --resource-group MyResourceGroup \
     --name MyFlaskVM \
     --image UbuntuLTS \
     --admin-username azureuser \
     --generate-ssh-keys
   ```

2. **Connect to the Azure VM**:

   Use SSH to connect to your Azure VM:

   ```bash
   ssh azureuser@<Your-VM-IP>
   ```

3. **Install Python and Flask on the VM**:

   Once connected to your VM, install the necessary dependencies:

   ```bash
   sudo apt update
   sudo apt install python3-pip python3-venv
   ```

   Create a directory for your Flask app and navigate to it:

   ```bash
   mkdir flask_app
   cd flask_app
   ```

   Create a virtual environment and activate it:

   ```bash
   python3 -m venv venv
   source venv/bin/activate
   ```

   Install Flask:

   ```bash
   pip install Flask
   ```

4. **Upload your Flask application**:

   You can upload your `app.py` using `scp` or any file transfer tool, or you can directly create the `app.py` file on the VM as you did locally.

5. **Run the Flask application**:

   Run the application on the VM:

   ```bash
   python app.py
   ```

   Your Flask application should now be accessible via the VM's public IP address at `http://<Your-VM-IP>:5000`.

### Step 3: Prepare the Environment on AWS EC2

1. **Create an AWS EC2 Instance**:

   You can create an EC2 instance using the AWS Management Console or AWS CLI. Choose an appropriate image, such as Amazon Linux or Ubuntu.

   Example using AWS CLI:

   ```bash
   aws ec2 run-instances \
     --image-id ami-0abcdef1234567890 \
     --count 1 \
     --instance-type t2.micro \
     --key-name MyKeyPair \
     --security-group-ids sg-0abcdef1234567890 \
     --subnet-id subnet-0abcdef1234567890
   ```

2. **Connect to the EC2 Instance**:

   Use SSH to connect to your EC2 instance:

   ```bash
   ssh -i "MyKeyPair.pem" ec2-user@<Your-EC2-Instance-IP>
   ```

3. **Install Python and Flask on the EC2 Instance**:

   Once connected to your EC2 instance, install the necessary dependencies:

   For Amazon Linux:

   ```bash
   sudo yum update -y
   sudo yum install python3-pip python3-venv -y
   ```

   For Ubuntu:

   ```bash
   sudo apt update
   sudo apt install python3-pip python3-venv -y
   ```

   Create a directory for your Flask app and navigate to it:

   ```bash
   mkdir flask_app
   cd flask_app
   ```

   Create a virtual environment and activate it:

   ```bash
   python3 -m venv venv
   source venv/bin/activate
   ```

   Install Flask:

   ```bash
   pip install Flask
   ```

4. **Upload your Flask application**:

   You can upload your `app.py` using `scp` or any file transfer tool, or you can directly create the `app.py` file on the EC2 instance as you did locally.

5. **Run the Flask application**:

   Run the application on the EC2 instance:

   ```bash
   python app.py
   ```

   Your Flask application should now be accessible via the EC2 instance's public IP address at `http://<Your-EC2-Instance-IP>:5000`.

### Step 4: Making the Flask App Available Externally

By default, Flask only listens on the local interface. To make it accessible externally, ensure the following:

1. **Configure Security Groups:**

   Ensure that the VM or EC2 instance’s security group allows inbound traffic on port 5000:

   - For Azure VM: Go to the Azure portal, find your VM’s network security group (NSG), and add an inbound rule for TCP port 5000.
   - For AWS EC2: In the AWS Management Console, go to the EC2 dashboard, select your instance’s security group, and add an inbound rule to allow traffic on port 5000.

2. **Run Flask with external access:**

   Modify the `app.run` line in your `app.py` to:

   ```python
   if __name__ == '__main__':
       app.run(host='0.0.0.0', port=5000)
   ```

   This tells Flask to listen on all available interfaces, making the application accessible externally.

### Step 5: Access Your Flask Application

After following the steps above:

- **For Azure VM**: Access the Flask application at `http://<Your-VM-IP>:5000`.
- **For AWS EC2**: Access the Flask application at `http://<Your-EC2-Instance-IP>:5000`.

### Step 6: Set Up as a Service (Optional)

To ensure your Flask app runs even after you disconnect from SSH, you can set it up as a systemd service (Linux) or use a process manager like `gunicorn` or `supervisor`.

For example, using systemd:

1. **Create a systemd service file**:

   ```bash
   sudo nano /etc/systemd/system/flaskapp.service
   ```

2. **Add the following content**:

   ```ini
   [Unit]
   Description=A simple Flask app
   After=network.target

   [Service]
   User=yourusername
   WorkingDirectory=/path/to/your/flask_app
   ExecStart=/path/to/your/flask_app/venv/bin/python app.py

   [Install]
   WantedBy=multi-user.target
   ```

3. **Reload systemd and start the service**:

   ```bash
   sudo systemctl daemon-reload
   sudo systemctl start flaskapp
   sudo systemctl enable flaskapp
   ```

4. **Check the status**:

   ```bash
   sudo systemctl status flaskapp
   ```

Now your Flask app will start automatically on boot and can be managed with systemd commands.
