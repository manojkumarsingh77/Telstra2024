Python Script for Continuous Data Generation
To generate real-time data that can dynamically update your Power BI dashboard, we’ll use a Python script that simulates telecom network data and pushes it to a data source like Azure Blob Storage or SQL database, which Power BI can pull data from.

Below is a Python script that generates signal strength, call drop rates, data usage, and customer satisfaction scores continuously and stores them in a CSV file. This script can run as a background task and can be used with Power BI to create a dynamic dashboard.

python
Copy code
import random
import time
import pandas as pd
from datetime import datetime

# Function to generate random telecom data for regions
def generate_telecom_data():
    # Sample cities or regions
    cities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix']
    
    # Placeholder for data
    data = []

    for city in cities:
        # Generate random values for KPIs
        signal_strength = round(random.uniform(1.0, 5.0), 2)  # Random signal strength between 1 and 5
        call_drop_rate = round(random.uniform(0, 0.2), 2)     # Random call drop rate between 0 and 0.2
        data_usage = random.randint(500, 5000)                # Random data usage in MB
        satisfaction_score = round(random.uniform(1, 5), 2)   # Random customer satisfaction score

        # Get the current timestamp
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        # Append the data as a dictionary
        data.append({
            'Timestamp': timestamp,
            'City': city,
            'SignalStrength': signal_strength,
            'CallDropRate': call_drop_rate,
            'DataUsageMB': data_usage,
            'CustomerSatisfaction': satisfaction_score
        })
    
    # Convert data into a Pandas DataFrame
    df = pd.DataFrame(data)
    return df

# Continuously generate and append data to CSV
def generate_continuous_data(output_file='telecom_data.csv', interval_seconds=30):
    while True:
        # Generate new telecom data
        df = generate_telecom_data()
        
        # Append data to CSV file
        df.to_csv(output_file, mode='a', header=not pd.io.common.file_exists(output_file), index=False)
        
        print(f"Data written to {output_file} at {datetime.now()}")
        
        # Wait for the specified interval before generating new data
        time.sleep(interval_seconds)

# Run the continuous data generation (every 30 seconds)
generate_continuous_data()
How the Script Works:
generate_telecom_data(): This function generates random network performance data for cities, including signal strength, call drop rates, data usage, and customer satisfaction scores.
generate_continuous_data(): This function continuously writes the generated data to a CSV file, appending new rows every 30 seconds.
You can configure the interval (interval_seconds) to your preferred time, depending on how frequently you want new data to appear in Power BI.

Steps to Integrate Python Data with Power BI:
Run the Python script to continuously generate telecom data.
Import the CSV file into Power BI:
Open Power BI Desktop.
Click Get Data > Text/CSV and select the generated telecom_data.csv file.
Click Load to bring the data into Power BI.
Enable Auto Refresh in Power BI:
Go to Modeling > Manage Data.
Enable auto-refresh every 1-5 minutes to continuously update the report with new data from the CSV file.
Create Visualizations:
Use the data generated by the Python script to create line charts, bar charts, gauge charts, and more to visualize signal strength, call drops, and customer satisfaction in real-time.
Visualizing Real-Time Data in Power BI:
Once the data is flowing and Power BI is set to refresh frequently, your dashboard will automatically update with the latest data. For real-time capabilities, you may also explore using Power BI’s streaming datasets or Direct Query to continuously pull data from sources like Azure SQL Database or Azure Blob Storage.

Sample Visualizations:

Line Chart: Real-time signal strength trends by city.
Gauge Chart: Customer satisfaction score.
Map: Network coverage by signal strength across regions.
Bar Chart: Call drop rates by city.
